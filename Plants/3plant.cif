import "Definitions.cif";

//TESTING

//Plant:
//Sensors
S_elevator_up   : TwoStateSensor(false);
S_elevator_down : TwoStateSensor(true);

S_pusher        : TwoStateSensor(false);

S_opticalT      : TwoStateSensor(false);

S_capacitive    : TwoStateSensor(false);

S_reflective    : TwoStateSensor(false);

S_productheight : TwoStateSensor(false);

S_Tinitialized  : TwoStateSensor(false);

//Actuators
A_elevator_up   : TwoStateActuator(false);
A_elevator_down : TwoStateActuator(true);

A_pusher        : TwoStateActuator(false);

A_airslide      : TwoStateActuator(false);

//Dynamics
//elevator dynamics, sensors are mutually exclusive
plant TDynamics:
    location: initial; marked;
        edge S_elevator_up.u_on   when S_elevator_down.Off;
        edge S_elevator_down.u_on when S_elevator_up.Off;
end

plant TTimer:
    controllable c_on, c_reset; uncontrollable u_timeout;
    location Off:
        initial; marked;
        edge c_on goto Running;
    location Running:
        edge u_timeout goto Timeout;
        edge c_reset goto Off;
    location Timeout:
        marked;
        edge c_reset goto Off;
end

//Requirements
//Initialization
//Actuators are only allowed to enable/disable when the station is initialized
requirement {A_elevator_up.c_on, A_elevator_up.c_off, A_elevator_down.c_on, A_elevator_down.c_off,
             A_pusher.c_on, A_pusher.c_off, A_airslide.c_on, A_airslide.c_off,
             TTimer.c_on, TTimer.c_reset} needs
             S_Tinitialized.On;

//Timer measures if the pusher is retracted long enough
requirement TTimer.c_on    needs A_pusher.Off;
requirement TTimer.c_reset needs A_pusher.On;

//Pusher
//Pusher is only allowed to retract when it is fully extended
requirement A_pusher.c_off needs S_pusher.On;

// Added by MG
//Pusher is only allowed to extend when it is fully retracted
requirement A_pusher.c_on needs S_pusher.Off;

//Pusher is only allowed to extend when
//  - Elevator is fully ascended  with a good product
//  - Elevator is fully descended with a bad product (this is currently not included)
requirement A_pusher.c_on needs S_elevator_up.On;

//Pusher is only allowed to extend when the product height is ok
requirement A_pusher.c_on needs S_productheight.On;

//Elevator
//Elevator flows cannot be enabled simultaneously
requirement A_elevator_down.c_on needs A_elevator_up.Off;
requirement A_elevator_up.c_on   needs A_elevator_down.Off;

//Elevator is only allowed to ascend when its fully descended
requirement {A_elevator_up.c_on, A_elevator_down.c_off} needs S_elevator_down.On;

//Elevator is only allowed to descend when its fully ascended
requirement {A_elevator_down.c_on, A_elevator_up.c_off} needs S_elevator_up.On;

//Elevator is only allowed to ascend or descend when the pusher is fully retracted for x seconds
requirement {A_elevator_down.c_on, A_elevator_up.c_off} needs S_pusher.Off;
requirement {A_elevator_down.c_on, A_elevator_up.c_off} needs TTimer.Timeout;

requirement {A_elevator_up.c_on, A_elevator_down.c_off} needs S_pusher.Off;
requirement {A_elevator_up.c_on, A_elevator_down.c_off} needs TTimer.Timeout;

//Elevator is only allowed to ascend when there is a product detected
requirement {A_elevator_up.c_on, A_elevator_down.c_off} needs S_capacitive.On;

//Elevator is only allowed to ascend when it is safe
requirement {A_elevator_up.c_on, A_elevator_down.c_off} needs S_reflective.Off;

//Elevator is only allowed to descend down when there is no good product
requirement {A_elevator_down.c_on, A_elevator_up.c_off} needs S_opticalT.Off;

//Air slide is only allowed to enable when there is a product being pushed onto
requirement A_airslide.c_on  needs S_elevator_up.On and S_pusher.On;

//Air slide is only allowed to disable after x seconds //Maybe use a timer!
requirement A_airslide.c_off needs S_elevator_down.On;

// MG: the current physical setup assures with all other requirements that this behavior is followed
// as A_pusher.c_on is only allows when there is a product (optical sensor), but after pusher the
// product out and fully retracting, there is no product any longer (optical sensor is of).
//The following flow is required Lift goes up -> Pusher extends -> Pusher retracts -> Lift goes down
// requirement PusherLift:
//     location One:
//         initial; marked;
//         edge A_elevator_down.c_off goto Two;
//     location Two:
//         edge A_pusher.c_on  goto Three;
//     location Three:
//         edge A_pusher.c_off goto Four;
//     location Four:
//         edge A_elevator_down.c_on goto One;
// end

// MG: requirement is already mentioned in Line 101. Maybe you mean that the elevator
// is only allowed to descend when it is safe??
//Elevator is only allowed to ascend when it is safe
requirement {A_elevator_up.c_on, A_elevator_down.c_off} needs S_reflective.Off;
