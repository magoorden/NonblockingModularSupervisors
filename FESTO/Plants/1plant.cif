import "Definitions.cif";

//DISTRIBUTING

//Plant:
//Sensors
S_product1      : TwoStateSensor(false);
S_product2      : TwoStateSensor(false);
S_product3      : TwoStateSensor(false);

S_pusher1_in    : TwoStateSensor(true);
S_pusher1_out   : TwoStateSensor(false);
S_stack1_filled : TwoStateSensor(true);

S_pusher2_in    : TwoStateSensor(true);
S_pusher2_out   : TwoStateSensor(false);
S_stack2_filled : TwoStateSensor(true);

S_pusher3_in    : TwoStateSensor(true);
S_pusher3_out   : TwoStateSensor(false);
S_stack3_filled : TwoStateSensor(true);

S_Dinitialized  : TwoStateSensor(false);

//Actuators
A_pusher1       : TwoStateActuator(false);
A_pusher2       : TwoStateActuator(false);
A_pusher3       : TwoStateActuator(false);

//Dynamics
plant DDynamics1:
    location: initial; marked;
        edge S_pusher1_in.u_on  when S_pusher1_out.Off;
        edge S_pusher1_out.u_on when S_pusher1_in.Off;
end

plant DDynamics2:
    location: initial; marked;
        edge S_pusher2_in.u_on  when S_pusher2_out.Off;
        edge S_pusher2_out.u_on when S_pusher2_in.Off;
end

plant DDynamics3:
    location: initial; marked;
        edge S_pusher3_in.u_on  when S_pusher3_out.Off;
        edge S_pusher3_out.u_on when S_pusher3_in.Off;
end

//Requirements
//Actuators are only allowed to actuate when the station is initialized
requirement {A_pusher1.c_on, A_pusher1.c_off} needs S_Dinitialized.On;
requirement {A_pusher2.c_on, A_pusher2.c_off} needs S_Dinitialized.On;
requirement {A_pusher3.c_on, A_pusher3.c_off} needs S_Dinitialized.On;

//The Pusher is only allowed to move backwards/out when it is completely in
requirement A_pusher1.c_on  needs S_pusher1_in.On;
requirement A_pusher2.c_on  needs S_pusher2_in.On;
requirement A_pusher3.c_on  needs S_pusher3_in.On;

//The Pusher is only allowed to move forwards/in when it is completely out
requirement A_pusher1.c_off needs S_pusher1_out.On;
requirement A_pusher2.c_off needs S_pusher2_out.On;
requirement A_pusher3.c_off needs S_pusher3_out.On;

//The Pusher is only allowed to move backwards/out when the product has been removed.
requirement A_pusher1.c_on  needs S_product1.Off;
requirement A_pusher2.c_on  needs S_product2.Off;
requirement A_pusher3.c_on  needs S_product3.Off;

//The Pusher is only allowed to move forwards/in when there is a product in front of it.
requirement A_pusher1.c_off needs S_stack1_filled.On;
requirement A_pusher2.c_off needs S_stack2_filled.On;
requirement A_pusher3.c_off needs S_stack3_filled.On;

//The Pusher is only allowed to move forward when there is no product at the pickup position
requirement A_pusher1.c_off needs S_product1.Off;
requirement A_pusher2.c_off needs S_product2.Off;
requirement A_pusher3.c_off needs S_product3.Off;
